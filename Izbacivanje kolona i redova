#include <stdio.h>
#include <math.h>
#define epsilon 0.0001
int main() {
    double matrica[100][100], prosjekMatrice=0, prosjekRedova[100]={0},prosjekKolona[100]={0};
    int m,n,i,j,k, tacanUnos, veciRed[100]={0}, veceKol[100]={0}, privremena;
    //Unos dimenzija i provjera unosa
    do{
        printf("Unesite vrijednosti M i N: ");
        scanf("%d %d",&m, &n);
        if(m<1 || n<1 || m>100 || n>100){
            printf("Vrijednosti su van opsega!\n");
            tacanUnos=0;
        }
        else tacanUnos=1;
    }while(!tacanUnos);

    //unos clanova matrice
    printf("Unesite clanove matrice: ");
    for(i=0;i<m;i++){
        for(j=0;j<n;j++){
            scanf("%lf",&matrica[i][j]);
            prosjekMatrice+=matrica[i][j];//sabiranje matrice
            prosjekRedova[i]+=matrica[i][j];//sabiranje redova
        }
    }
    prosjekMatrice/=(m*n);//racunanje prosjeka matrice

    //provjera koji redovi ne ispunjuju uslove
    for(i=0;i<m;i++) {
        prosjekRedova[i]/=n;//racunanje prosjeka redova
        if(prosjekRedova[i]>prosjekMatrice && (fabs(prosjekRedova[i]-prosjekMatrice)> epsilon)) veciRed[i]++; 
    }

    //izbacivanje redova
    for(i=m-1;i>=0;i--){
        if(veciRed[i]){
            if (i==m-1) m--;
            else{
                for(j=i;j<m-1;j++){
                    for(k=0;k<n;k++){
                        matrica[j][k]=matrica[j+1][k];
                    }
                }
                m--;
            }
        }
    }
    //rjesavanje za kolone
    for(i=0;i<m;i++){
        for (j=0;j<n;j++){
            prosjekKolona[j]+=matrica[i][j];//sabiranje kolona
        }
    }
    //provjera koje kolone ne ispunjuju uslove
    for(i=0;i<n;i++) {
        prosjekKolona[i]/=m;//racunanje prosjeka kolona
        if(prosjekKolona[i]>prosjekMatrice && (fabs(prosjekKolona[i]-prosjekMatrice)>epsilon)) veceKol[i]++; 
    }
    //izbacivanje kolona
     for(i=n-1;i>=0;i--){
        if(veceKol[i]){
            if (i==n-1) n--;
            else{
                for(j=i;j<n-1;j++){
                    for(k=0;k<m;k++){
                        matrica[k][j]=matrica[k][j+1];
                    }
                }
                n--;
            }
        }
    }
    //ispis matrice 
    printf("\nNakon izbacivanja matrica glasi:\n");
    for(i=0;i<m;i++){
        for(j=0;j<n;j++){
            //zaokruzivanje
            privremena=(matrica[i][j]*100);
            matrica[i][j]=(double)((round(privremena/10))/10);
            printf("%6.1lf",matrica[i][j]);
        }
        printf("\n");
    }

	return 0;
}

/*
Potrebno je napisati program koji obavlja sljedeći zadatak:

Korisnik najprije mora unijeti dva prirodna broja M i N ne veća od 100. Petljom do-while osigurati da su brojevi u traženom opsegu.
Nakon toga se unosi matrica realnih brojeva (tipa double) koja se sastoji od M redova i N kolona.

Program treba najprije izračunati srednju vrijednost svih elemenata matrice, a zatim izbaciti sve redove matrice čija je 
srednja vrijednost veća od srednje vrijednosti kompletne matrice, te nakon toga i sve kolone. 
Konačno, treba ispisati na ekran matricu pri čemu svaki član matrice treba biti zaokružen na jednu decimalu, a za svaki član 
treba biti predviđeno 6 mjesta na ekranu.

Primjer ulaza i izlaza:

Unesite vrijednosti M i N: 3 103
Vrijednosti su van opsega!
Unesite vrijednosti M i N: 3 3
Unesite clanove matrice: 
1.1 2.2 3.3
4.4 5.5 6.6
7.7 8.8 9.9
Nakon izbacivanja matrica glasi:
1.1 2.2 3.3
4.4 5.5 6.6
Objašnjenje: Srednja vrijednost članova matrice je 5.5, srednja vrijednost prvog reda je 2.2 (ne treba ga izbaciti), 
drugog je 5.5 (ne treba ga izbaciti jer je srednja vrijednost jednaka srednjoj vrijednosti čitave matrice), a trećeg je 8.8 (treba ga izbaciti). 
Dakle nakon izbacivanja redova matrica glasi:
1.1 2.2 3.3
4.4 5.5 6.6
Sada izračunavamo srednje vrijednosti kolona i vidimo da nijedna od njih nije veća od 5.5 tako da nijednu kolonu ne treba izbaciti.

Kod provjere jednakosti koristiti vrijednost ε=0.0001.

Napomena: Zadatak obavezno riješiti koristeći matricu. Obavezno program se najprije treba sastojati od unosa matrice, zatim izbacivanja, 
te nakon toga ispisa matrice bez preskakanja elemenata prilikom ispisa.
*/
